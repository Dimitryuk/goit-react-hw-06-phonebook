{"version":3,"sources":["ContactForm/ContactForm.module.css","ContactList/ContactList.module.css","Filter/Filter.module.css","redux/contacts/actions.js","ContactForm/ContactFormHooks.js","ContactList/ContactListHooks.js","Filter/FilterHooks.js","AppHooks.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","connect","contacts","phonebookContacts","dispatch","onSubmit","useState","setName","setNumber","handleChange","e","target","value","preventDefault","className","s","input__field","onChange","type","pattern","title","required","form__button","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","phonebookFilter","contacts__list","map","contacts__button","onClick","htmlFor","filter__field","currentTarget","App","createReducer","state","_","combineReducers","ContactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,aAAe,kCAAkC,aAAe,oC,mBCAlFD,EAAOC,QAAU,CAAC,eAAiB,oCAAoC,iBAAmB,wC,mBCA1FD,EAAOC,QAAU,CAAC,cAAgB,gC,0KCE5BC,EAAaC,YAAa,gBAAgB,SAACC,EAAMC,GAAP,MAAmB,CACjEC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cAGEK,EAAgBP,YAAa,oBAC7BQ,EAAeR,YAAa,0B,wBCmElC,IAOeS,eAPS,SAAC,GAAD,SAAGC,SAAYC,qBAGZ,SAACC,GAAD,MAAe,CACxCC,SAAU,SAACZ,EAAMC,GAAP,OAAkBU,EAASb,EAAWE,EAAMC,QAGzCO,EA9Ef,YAAsD,EAA/BE,kBAAgC,IAAbE,EAAY,EAAZA,SACxC,EAAwBC,mBAAS,IAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOZ,EAAP,KAAec,EAAf,KAMMC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBlB,EAAR,EAAQA,KAAMmB,EAAd,EAAcA,MAEd,OAAQnB,GACN,IAAK,OACHc,EAAQK,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,QACE,SAaN,OACE,8BACE,uBAAMP,SAXW,SAACK,GACpBA,EAAEG,iBAEFR,EAASZ,EAAMC,GAEfa,EAAQ,IACRC,EAAU,KAKR,UACE,yCAEE,uBACEM,UAAWC,IAAEC,aACbC,SAAUR,EACVS,KAAK,OACLzB,KAAK,OACLmB,MAAOnB,EACP0B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEP,UAAWC,IAAEC,aACbC,SAAUR,EACVS,KAAK,MACLzB,KAAK,SACLmB,MAAOlB,EACPyB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQP,UAAWC,IAAEO,aAAcJ,KAAK,SAAxC,iC,iBCzCFK,EAAqB,SAACC,EAAaC,GACvC,IAAMC,EAAmBD,EAAOE,cAChC,OAAOH,EAAYC,QAAO,SAACG,GAAD,OACxBA,EAAQnC,KAAKkC,cAAcE,SAASH,OAazBzB,eAVS,SAAC,GAAD,QACtBC,SAAYC,EADU,EACVA,kBAAmB2B,EADT,EACSA,gBADT,MAEjB,CACL5B,SAAUqB,EAAmBpB,EAAmB2B,OAGvB,SAAC1B,GAAD,MAAe,CACxCL,cAAe,SAACH,GAAD,OAAQQ,EAASL,EAAcH,QAGjCK,EArCK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUH,EAAoB,EAApBA,cAC/B,OACE,8BACE,oBAAIe,UAAWC,IAAEgB,eAAjB,SACG7B,EAAS8B,KAAI,gBAAGvC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQE,EAAjB,EAAiBA,GAAjB,OACZ,qBAAakB,UAAU,mBAAvB,UACGrB,EADH,IACUC,EACR,wBACEoB,UAAWC,IAAEkB,iBACbf,KAAK,SACLgB,QAAS,kBAAMnC,EAAcH,IAH/B,sBAFOA,a,iBCeJK,eANS,SAAC,GAAD,MAA+B,CAAEwB,OAAjC,EAAGvB,SAAYuB,WAEZ,SAACrB,GAAD,MAAe,CACxCJ,aAAc,SAACY,GAAD,OAAWR,EAASJ,EAAaY,QAGlCX,EAvBA,SAAC,GAA8B,IAA5BwB,EAA2B,EAA3BA,OAAQzB,EAAmB,EAAnBA,aACxB,OACE,sBAAKc,UAAU,gBAAf,iCAEE,uBAAOqB,QAAQ,GAAf,SACE,uBACErB,UAAWC,IAAEqB,cACblB,KAAK,OACLzB,KAAK,SACLmB,MAAOa,EACPR,SAAU,SAACP,GAAD,OAAOV,EAAaU,EAAE2B,cAAczB,kBC0FzC0B,I,EAAAA,EAdf,WACE,OACE,mCACE,sBAAKxB,UAAU,MAAf,UACG,2CACA,cAAC,EAAD,IACA,0CACD,cAAC,EAAD,IACC,cAAC,EAAD,U,gEC/FHX,EAAoBoC,YAAc,IAAD,mBACpChD,GAAa,SAACiD,EAAD,OAAU7C,EAAV,EAAUA,QAAV,4BAA4B6C,GAA5B,CAAmC7C,OADZ,cAEpCI,GAAgB,SAACyC,EAAD,OAAU7C,EAAV,EAAUA,QAAV,OACf6C,EAAMf,QAAO,SAACG,GAAD,OAAaA,EAAQhC,KAAOD,QAHN,IAKjCmC,EAAkBS,YAAc,GAAD,eAClCvC,GAAe,SAACyC,EAAD,YAAM9C,YAET+C,cAAgB,CAC7BvC,oBACA2B,oBCCIa,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGRC,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAQC,YAAe,CAC3BC,QAAS,CACP1D,SAAU2D,YAAelB,EAAuBmB,IAElDf,aACAgB,UAAUC,IAKG,GAAEN,QAAOO,UAFNC,YAAaR,ICR/BS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAMA,MAAvB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,W","file":"static/js/main.03c73c70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input__field\":\"ContactForm_input__field__2avNL\",\"form__button\":\"ContactForm_form__button__m7GUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"ContactList_contacts__list__ieZuD\",\"contacts__button\":\"ContactList_contacts__button__1c5X6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__field\":\"Filter_filter__field__3VCjK\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContact = createAction(\"phonebook/delete\");\r\nconst changeFilter = createAction(\"phonebook/changeFilter\");\r\n\r\nexport { addContact, deleteContact, changeFilter };\r\n","import React, { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../redux/contacts/actions\";\r\n\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm({ phonebookContacts, onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  // const nameInputId = shortid.generate();\r\n  // const numberInputId = shortid.generate();\r\n\r\n  //onChangeInput\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  //onSubmitForm\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    onSubmit(name, number);\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className={s.input__field}\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className={s.input__field}\r\n            onChange={handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={s.form__button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { phonebookContacts } }) =>\r\n  phonebookContacts;\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","\r\n\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../redux/contacts/actions\";\r\n\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <div>\r\n      <ol className={s.contacts__list}>\r\n        {contacts.map(({ name, number, id }) => (\r\n          <li key={id} className=\"ContactList_item\">\r\n            {name} {number}\r\n            <button\r\n              className={s.contacts__button}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\nconst mapStateToProps = ({\r\n  contacts: { phonebookContacts, phonebookFilter },\r\n}) => ({\r\n  contacts: getVisibleContacts(phonebookContacts, phonebookFilter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeFilter } from \"../redux/contacts/actions\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filter, changeFilter }) => {\r\n  return (\r\n    <div className=\"FilterWrapper\">\r\n      Find contact by name\r\n      <label htmlFor=\"\">\r\n        <input\r\n          className={s.filter__field}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filter}\r\n          onChange={(e) => changeFilter(e.currentTarget.value)}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { filter } }) => ({ filter: filter });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeFilter: (value) => dispatch(changeFilter(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { useState, useEffect } from \"react\";\r\n// import shortid from \"shortid\";\r\n// import \"./App.css\";\r\n// import ContactForm from \"./ContactForm/ContactFormHooks\";\r\n// import ContactList from \"./ContactList/ContactListHooks\";\r\n\r\n// import Filter from \"./Filter/FilterHooks\";\r\n\r\n// import React from \"react\";\r\n\r\n// function App() {\r\n//   const initialContacts = [\r\n//     { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//     { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//     { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//     { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n//   ];\r\n//   const [name, setName] = useState(\"\");\r\n//   const [number, setNumber] = useState(\"\");\r\n//   const [filter, setFilter] = useState(\"\");\r\n//   const [contacts, setContacts] = useState(() => {\r\n//     return (\r\n//       JSON.parse(window.localStorage.getItem(\"contacts\")) ?? initialContacts\r\n//     );\r\n//   });\r\n\r\n//   //componentDidMount\r\n//   useEffect(() => {\r\n//     const contacts = window.localStorage.getItem(\"contacts\");\r\n//     if (contacts) {\r\n//       setContacts(JSON.parse(contacts));\r\n//     } else setContacts(initialContacts);\r\n//   }, []);\r\n\r\n//   // componentDidUpdate\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n//   }, [contacts]);\r\n\r\n//   const handleAddContact = (data) => {\r\n//     if (contacts.some((contact) => contact.name === data.name)) {\r\n//       alert(`${data.name} already exists`);\r\n//       return;\r\n//     }\r\n\r\n//     setContacts((contacts) => {\r\n//       const newContact = {\r\n//         id: shortid.generate(),\r\n//         ...data,\r\n//       };\r\n//       return [newContact, ...contacts];\r\n//     });\r\n//     setName(\"\");\r\n//     setNumber(\"\");\r\n//   };\r\n//   const handleFilterChange = (e) => {\r\n//     setFilter(e.currentTarget.value);\r\n//   };\r\n\r\n//   const handleDeleteContact = (contactId) => {\r\n//     setContacts(contacts.filter(({ id }) => id !== contactId));\r\n//   };\r\n//   const getVisibleContacts = (contacts, filter) => {\r\n//     return contacts.filter(({ name }) =>\r\n//       name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"App\">\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm  />\r\n//         <h2>Contacts</h2>\r\n//         <Filter onFilterChange={handleFilterChange} />\r\n//         <ContactList\r\n//           contacts={getVisibleContacts(contacts, filter)}\r\n//           onDeleteContact={handleDeleteContact}\r\n//         />\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n// export default App;\r\n\r\nimport \"./App.css\";\r\nimport ContactForm from \"./ContactForm/ContactFormHooks\";\r\nimport ContactList from \"./ContactList/ContactListHooks\";\r\n\r\nimport Filter from \"./Filter/FilterHooks\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n         <h1>Phonebook</h1>\r\n         <ContactForm  />\r\n         <h2>Contacts</h2>\r\n        <Filter  />\r\n         <ContactList/>\r\n       </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { addContact, changeFilter, deleteContact } from \"./actions.js\";\r\n\r\nconst phonebookContacts = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\nconst phonebookFilter = createReducer(\"\", {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  phonebookContacts,\r\n  phonebookFilter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/reducers\";\r\n\r\nconst ContactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(ContactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './index.css';\r\n// import App from './AppHooks';\r\n// import { store } from './redux/store'\r\n// import {Provider} from 'react-redux'\r\n\r\n\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store}>\r\n//     <App />\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./AppHooks\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}